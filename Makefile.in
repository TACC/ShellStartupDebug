srcdir          := @srcdir@
PATH_TO_LUA	:= @PATH_TO_LUA@
version		:= $(shell cd $(srcdir)/src; $(PATH_TO_LUA)/lua -e "V=require('Version'); print(V.tag())")
VERSION_SRC	:= src/Version.lua
VERSION_LIB	:= $(subst .lua,,$(VERSION_SRC))
GIT_PROG        := @PATH_TO_GIT@
GIT_VERSION     := $(shell if [ -n "$(GIT_PROG)" -a -d .git ]; then ssdV=`git describe --always`; echo "($$ssdV)"; else echo "@git@"; fi)
prefix		:= @prefix@
package		:= shell_startup_debug
PKG		:= $(prefix)/$(package)/$(package)
LIBEXEC		:= $(prefix)/$(package)/$(version)/libexec
TOOLS		:= $(prefix)/$(package)/$(version)/tools
INIT		:= $(prefix)/$(package)/$(version)/init

DIRLIST		:= $(DESTDIR)$(LIBEXEC) $(DESTDIR)$(INIT) $(DESTDIR)$(TOOLS)

SHELL_INIT	:= bash.in csh.in ksh.in tcsh.in zsh.in sh.in
SHELL_INIT	:= $(patsubst %, setup/%, $(SHELL_INIT))

MAIN_DIR	:= Makefile.in configure README INSTALL

lua_code	:= $(wildcard src/*.lua) 
VDATE		:= $(shell date +'%F %H:%M')

LUA_PKGS        := 
LIBEXEC_CMDS    := $(patsubst %, src/%, DBG_INDENT_cmd.in ECHO_cmd.in epoch.in)
INIT_FILES      := $(patsubst %, src/%, shell_startup.rc.in)


.PHONY: test

all:
	@echo done

pre-install: $(DIRLIST) startup libexec libexec_cmds rc_files Inst_tools

install: pre-install
	$(RM) $(DESTDIR)$(PKG)
	ln -s $(version) $(DESTDIR)$(PKG)

Inst_tools: tools/*.lua
	$(MAKE) INSTALL_LIST="$^" DIRLOC=$(DESTDIR)$(TOOLS) __install_me


echo:
	@echo Version: $(version)
	@echo Lua Version: `lua -e 'print(_VERSION)'`
	pathprint PATH


$(DIRLIST) :
	mkdir -p $@


__install_me: $(INSTALL_LIST)
	-for i in $^; do                                           	 \
          bareN=$${i##*/};                                        	 \
          fn=$${bareN%%.in*};                                     	 \
          ext=$${bareN#*.};                                       	 \
          sed -e 's|@PREFIX@|@prefix@|g'                          	 \
	      -e 's|@path_to_lua@|$(PATH_TO_LUA)|g'               	 \
              -e 's|@git@|$(GIT_VERSION)|g'                       	 \
              -e 's|@PKG@|$(PKG)|g'         < $$i > $(DIRLOC)/$$fn;   	 \
          if [ "$$ext" = "in" ];  then chmod +x $(DIRLOC)/$$fn;  fi      \
        done

__echo_me:
	@echo INSTALL_LIST: $(INSTALL_LIST)


startup: $(SHELL_INIT)
	$(MAKE) INSTALL_LIST="$^" DIRLOC=$(DESTDIR)$(INIT) __install_me


libexec_cmds: $(LIBEXEC_CMDS)
	$(MAKE) INSTALL_LIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __install_me

rc_files: $(INIT_FILES)
	$(MAKE) INSTALL_LIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __install_me

libexec:  $(lua_code)
	$(MAKE) INSTALL_LIST="$^" DIRLOC=$(DESTDIR)$(LIBEXEC) __install_me


makefile: Makefile.in config.status
	./config.status

config.status:
	./configure

dist:
	GIT_BRANCH=`git status | head -n 1 | sed -e 's/^[# ]*On branch //g' -e 's/^[# ]*HEAD detached at//g'`  ; \
	git archive --prefix=ssd-$(version)/ $$GIT_BRANCH > ssd-$(version).tar                                 ; \
        $(RM) -rf DIST                                                                                         ; \
        mkdir DIST                                                                                             ; \
        cd DIST                                                                                                ; \
        tar xf ../ssd-$(version).tar                                                                           ; \
        find ssd-$(version) -type f      -print0 | xargs -0 sed -i.bk 's/\@git\@/$(GIT_VERSION)/g'             ; \
        find ssd-$(version) -name '*.bk' -exec rm -f {} \;                                                     ; \
        $(RM) ../ssd-$(version).tar                                                                            ; \
        mv ssd-$(version) shell_startup_debug-$(version)                                                       ; \
        tar cjf ../shell_startup_debug-$(version).tar.bz2 shell_startup_debug-$(version)                       ; \
	cd ..; $(RM) -rf DIST


world_update:
	@git status -s > /tmp/ssd$$$$;                                             \
        if [ -s /tmp/ssd$$$$ ]; then                                               \
            echo "All files not checked in => try again";                          \
        else                                                                       \
            git push github;                                                       \
            git push --tags github;                                                \
        fi;                                                                        \
        rm -f /tmp/ssd$$$$

tags:
	find . \( -regex '.*~$$\|.*/\.git\|.*/\.git/' -prune \)  \
               -o -type f > file_list.1
	sed -e 's|.*/.git.*||g'                                  \
            -e 's|.*/rt/.*/t1/.*||g'                             \
            -e 's|./TAGS||g'                                     \
            -e 's|./configure$$||g'                              \
            -e 's|/.DS_Store||g'                                 \
            -e 's|.*\.tgz$$||g'                                  \
            -e 's|.*\.tar\.gz$$||g'                              \
            -e 's|.*\.tar\.bz2$$||g'                             \
            -e 's|.*\.csv$$||g'                                  \
            -e 's|^#.*||g'                                       \
            -e 's|/#.*||g'                                       \
            -e 's|\.#.*||g'                                      \
            -e 's|.*\.pdf$$||g'                                  \
            -e 's|.*\.used$$||g'                                 \
            -e 's|./.*\.log$$||g'                                \
            -e 's|./testreports/.*||g'                           \
            -e 's|./config\.status$$||g'                         \
            -e 's|.*\~$$||g'                                     \
            -e 's|./file_list\..*||g'                            \
            -e '/^\s*$$/d'                                       \
	       < file_list.1 > file_list.2
	etags  `cat file_list.2`
	$(RM) file_list.*


clean:
	$(RM) config.log

clobber: clean

distclean: clobber
	$(RM) makefile config.status

gittag:
        ifneq ($(TAG),)
	  @git status -s > /tmp/git_st_$$$$;                                         \
          if [ -s /tmp/git_st_$$$$ ]; then                                           \
	    echo "All files not checked in => try again";                            \
	  elif [ configure -ot configure.ac ]; then                                  \
            echo "configure is out of date => try again";                            \
	  else                                                                       \
	    $(RM)                                                    $(VERSION_SRC); \
	    echo "--module('Version')"                            >  $(VERSION_SRC); \
	    echo 'local M={}'                                     >  $(VERSION_SRC); \
	    echo 'function M.tag()  return "$(TAG)"   end'        >> $(VERSION_SRC); \
	    echo 'function M.git()'                               >> $(VERSION_SRC); \
            echo '   local s = "@git@"'                           >> $(VERSION_SRC); \
            echo '   if (s == "@" .. "git@")     then s = "" end' >> $(VERSION_SRC); \
            echo '   if (s == "("..M.tag()..")") then s = "" end' >> $(VERSION_SRC); \
            echo '   return s'                                    >> $(VERSION_SRC); \
            echo 'end'                                            >> $(VERSION_SRC); \
	    echo 'function M.date() return "$(VDATE)" end'        >> $(VERSION_SRC); \
	    echo 'function M.name()'                              >> $(VERSION_SRC); \
            echo '  local a = {}'                                 >> $(VERSION_SRC); \
	    echo '  a[#a+1] = M.tag()'                            >> $(VERSION_SRC); \
	    echo '  a[#a+1] = M.git()'                            >> $(VERSION_SRC); \
	    echo '  a[#a+1] = M.date()'                           >> $(VERSION_SRC); \
	    echo '  return table.concat(a," ")'                   >> $(VERSION_SRC); \
	    echo 'end'                                            >> $(VERSION_SRC); \
	    echo 'return M'                                       >> $(VERSION_SRC); \
            git commit -m "moving to TAG_VERSION $(TAG)"             $(VERSION_SRC); \
            git tag -a $(TAG) -m 'Setting TAG_VERSION to $(TAG)'                   ; \
	    git push --tags                                                        ; \
          fi;                                                                        \
          rm -f /tmp/git_st_$$$$
        else
	  @echo "To git tag do: make gittag TAG=?"
        endif
