#!@path_to_lua@/lua
-- -*- lua -*-

--------------------------------------------------------------------------
-- shell_startup_debug License
--------------------------------------------------------------------------
--
--  shell_startup_debug is licensed under the terms of the MIT license 
--  reproduced below. This means that shell_startup_debug  is free software 
--  and can be used for both academic and commercial purposes at absolutely
--  no cost.
--
--  ----------------------------------------------------------------------
--
--  Copyright (C) 2013 Robert McLay
--
--  Permission is hereby granted, free of charge, to any person obtaining
--  a copy of this software and associated documentation files (the
--  "Software"), to deal in the Software without restriction, including
--  without limitation the rights to use, copy, modify, merge, publish,
--  distribute, sublicense, and/or sell copies of the Software, and to
--  permit persons to whom the Software is furnished to do so, subject
--  to the following conditions:
--
--  The above copyright notice and this permission notice shall be
--  included in all copies or substantial portions of the Software.
--
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
--  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
--  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
--  NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
--  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
--  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
--  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
--  THE SOFTWARE.
--
--------------------------------------------------------------------------


------------------------------------------------------------------------
-- Use command name to add the command directory to the package.path
------------------------------------------------------------------------
_DEBUG        = false
local format  = string.format
local posix   = require("posix")
local LuaCommandName = arg[0]
local i,j = LuaCommandName:find(".*/")
local LuaCommandName_dir = "./"
if (i) then
   LuaCommandName_dir = LuaCommandName:sub(1,j)
end

package.path = LuaCommandName_dir .. "../tools/?.lua;" ..
               LuaCommandName_dir .. "?.lua;"       ..
               package.path


local master = {}

function masterTbl()
   return master
end

BaseShell = require("BaseShell")

require("strict")
require("fileOps")
require("capture")
require("string_utils")
local getenv       = os.getenv
local Version      = require("Version")
local version      = Version.name
local setenv_posix = posix.setenv
local concatTbl    = table.concat

function printArg(f, arg, T0, Tprev, T1)
   local endBlk = false
   local sA        = {}
   for idx,v in ipairs(arg) do
      local i,j = v:find("}")

      if ( idx == 1 and j ) then
         local indent    = v:sub(1,j-1) .. "  "
         local printList = getenv("SHELL_STARTUP_DEBUG_PRINT_LIST") or ""
         for var in printList:split(":") do
            local v = getenv(var)
            if (v) then
               f:write(indent,var,": ",v,"\n")
            end
         end
         local s  = string.format("%.4f",T1 - T0)
         sA[#sA + 1] = v
         sA[#sA + 1] = " Time = "
         sA[#sA + 1] = s
         local line  = concatTbl(sA,"")
         local myLen = 50 - line:len()
         local gap   = " "
         if (myLen > 0) then
            gap = gap:rep(myLen)
         end            
         sA[#sA + 1] = gap
         sA[#sA + 1] = format("(delta = %.4f)", T1 - Tprev)
         endBlk = true
      else
         sA[#sA + 1] = v
      end
   end
   f:write(concatTbl(sA,""),"\n")
   return endBlk
end




function main()

   if (#arg == 0) then return end

   if (#arg == 1 and arg[1] == "-") then
      arg[1] = io.stdin:read("*a")
   end

   local Optiks        = require("Optiks")
   local usage         = "Usage: ECHO_cmd [options] [up|down]"
   local cmdlineParser = Optiks:new{usage=usage, version=format("ECHO_cmd %s",version())}

   cmdlineParser:add_option{ 
      name    = {'-s','--shell'},
      dest    = 'shellNm',
      action  = 'store',
      type    = 'string',
      default = 'bash',
   }

   local optionTbl, pargs = cmdlineParser:parse(arg)

   local masterTbl   = masterTbl()
   for v in pairs(optionTbl) do
      masterTbl[v]   = optionTbl[v]
   end
   masterTbl.pargs   = pargs
   masterTbl.shellNm = barefilename(masterTbl.shellNm)
   local shell       = BaseShell.build(masterTbl.shellNm)

   local T0    = tonumber(getenv("SHELL_STARTUP_DEBUG_T0") or "0")
   local Tprev = tonumber(getenv("SHELL_STARTUP_DEBUG_PREV") or T0)
   local T1    = tonumber(capture("@PKG@/libexec/epoch"))

   local ssd   = tonumber(getenv("SHELL_STARTUP_DEBUG") or "0")
   local f     = io.stderr

   if (ssd == 3) then
      local dfltFn  = pathJoin(getenv("HOME"),"SHELL_STARTUP.log")
      local ssdFn   = getenv("SHELL_STARTUP_DEBUG_FN") or dfltFn
      f             = io.open(ssdFn, "r")
      local prtDate = false
      if (f == nil) then
         prtDate = true
      end
      f             = io.open(ssdFn, "a")

      ---------------------------------------------------------
      -- if you can not open a file then do not print anything.
      if (f == nil) then return end
      if (prtDate) then
         f:write("Shell Startup Debug Version: ",Version:name(),"\n")
         f:write("--------------------------------------------\n")
         f:write(os.date(),"\n")
         f:write("--------------------------------------------\n")
      end
   end

   local endBlk = printArg(f,masterTbl.pargs, T0, Tprev, T1)
   if (endBlk) then
      local envVarT = {}
      envVarT["SHELL_STARTUP_DEBUG_PREV"] = string.format("%.4f",T1)
      shell:expand(envVarT)
   end
   f:close()
end

main()
