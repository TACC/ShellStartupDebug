#!@path_to_lua@/lua
-- -*- lua -*-

--------------------------------------------------------------------------
-- shell_startup_debug License
--------------------------------------------------------------------------
--
--  shell_startup_debug is licensed under the terms of the MIT license 
--  reproduced below. This means that shell_startup_debug  is free software 
--  and can be used for both academic and commercial purposes at absolutely
--  no cost.
--
--  ----------------------------------------------------------------------
--
--  Copyright (C) 2013 Robert McLay
--
--  Permission is hereby granted, free of charge, to any person obtaining
--  a copy of this software and associated documentation files (the
--  "Software"), to deal in the Software without restriction, including
--  without limitation the rights to use, copy, modify, merge, publish,
--  distribute, sublicense, and/or sell copies of the Software, and to
--  permit persons to whom the Software is furnished to do so, subject
--  to the following conditions:
--
--  The above copyright notice and this permission notice shall be
--  included in all copies or substantial portions of the Software.
--
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
--  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
--  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
--  NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
--  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
--  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
--  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
--  THE SOFTWARE.
--
--------------------------------------------------------------------------


------------------------------------------------------------------------
-- Use command name to add the command directory to the package.path
------------------------------------------------------------------------
local LuaCommandName = arg[0]
local i,j = LuaCommandName:find(".*/")
local LuaCommandName_dir = "./"
if (i) then
   LuaCommandName_dir = LuaCommandName:sub(1,j)
end

package.path = LuaCommandName_dir .. "../tools/?.lua;" ..
               LuaCommandName_dir .. "?.lua;"       ..
               package.path


require("strict")
require("fileOps")
require("capture")
local posix  = require("posix")
local getenv = os.getenv

function printArg(f,arg, T0)
   for i,v in ipairs(arg) do
      if ( i == 1 and v:find("}")) then
         local T1 = tonumber(capture("@PKG@/libexec/epoch"))
         local s  = string.format("%.4f",T1 - T0)
         f:write(v," Time = ",s)
      else
         f:write(v)
      end
   end
   f:write("\n")
end


function main()

   if (#arg == 0) then return end
   local T0 = tonumber(getenv("SHELL_STARTUP_DEBUG_T0"))

   local ssd = tonumber(getenv("SHELL_STARTUP_DEBUG"))
   if (ssd < 3) then
      printArg(io.stdout, arg, T0)
      return
   end


   local dfltFn  = pathJoin(getenv("HOME"),"SHELL_STARTUP.log")

   local ssdFn   = getenv("SHELL_STARTUP_DEBUG_FN") or dfltFn
   local f       = io.open(ssdFn, "r")
   local prtDate = false
   if (f == nil) then
      prtDate = true
   end
   f             = io.open(ssdFn, "a")

   ---------------------------------------------------------
   -- if you can not open a file then do not print anything.
   if (f == nil) then return end

   if (prtDate) then
      f:write("--------------------------------------------\n")
      f:write(os.date(),"\n")
      f:write("--------------------------------------------\n")
   end
   printArg(f,arg, T0)

   f:close()
end

main()
