#!@path_to_lua@/lua
-- -*- lua -*-

--------------------------------------------------------------------------
-- shell_startup_debug License
--------------------------------------------------------------------------
--
--  shell_startup_debug is licensed under the terms of the MIT license 
--  reproduced below. This means that shell_startup_debug  is free software 
--  and can be used for both academic and commercial purposes at absolutely
--  no cost.
--
--  ----------------------------------------------------------------------
--
--  Copyright (C) 2013 Robert McLay
--
--  Permission is hereby granted, free of charge, to any person obtaining
--  a copy of this software and associated documentation files (the
--  "Software"), to deal in the Software without restriction, including
--  without limitation the rights to use, copy, modify, merge, publish,
--  distribute, sublicense, and/or sell copies of the Software, and to
--  permit persons to whom the Software is furnished to do so, subject
--  to the following conditions:
--
--  The above copyright notice and this permission notice shall be
--  included in all copies or substantial portions of the Software.
--
--  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
--  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
--  OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
--  NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
--  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
--  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
--  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
--  THE SOFTWARE.
--
--------------------------------------------------------------------------

------------------------------------------------------------------------
-- Use command name to add the command directory to the package.path
------------------------------------------------------------------------
_G._DEBUG      = false
local posix    = require("posix")
local LuaCommandName = arg[0]
local i,j = LuaCommandName:find(".*/")
local LuaCommandName_dir = "./"
if (i) then
   LuaCommandName_dir = LuaCommandName:sub(1,j)
end

package.path = LuaCommandName_dir .. "../tools/?.lua;" ..
               LuaCommandName_dir .. "?.lua;"       ..
               package.path


local master = {}

function masterTbl()
   return master
end

BaseShell = require("BaseShell")

require("strict")
local CmdLineOptions = require("CmdLineOptions")
require("Output")

function quiet(idx)
   return idx
end

function False(idx)
   return false
end

function up(idx)
   return idx + 1
end

function down(idx)
   idx = idx - 1
   if (idx < 0) then idx = 0 end
   return idx
end

cmdTbl = {
   clobber   = False,
   up        = up,
   down      = down,
}

function idx_name()
   return "__DBG_INDENT_IDX"
end

function build_indent(cmd)
   local masterTbl = masterTbl()
   local idx_name  = idx_name()
   local idx       = tonumber(os.getenv(idx_name)) or 0
   local envVarsT  = masterTbl.envVarsT

   local idxCmd       = cmdTbl[cmd] or quiet
   idx                = idxCmd(idx)
   envVarsT[idx_name] = idx

   if (type(idx) == 'number' and idx > 0) then
      envVarsT["DBG_INDENT_FMT"] = "%" .. tostring(idx*2) .. "s"
      envVarsT["DBG_INDENT_ARG"] = " "
   else
      envVarsT["DBG_INDENT_FMT"] = "%s"
      envVarsT["DBG_INDENT_ARG"] = ""
   end
   if (cmd == 'clobber') then
      envVarsT["SHELL_STARTUP_DEBUG"] = false
      envVarsT["SHELL_STARTUP_DEBUG_FN"] = false
   elseif (cmd == 'first') then
      envVarsT["SHELL_STARTUP_DEBUG_FN"] = false
   end
end

function main()
   local masterTbl = masterTbl()
   masterTbl.execDir = LuaCommandName_dir

   CmdLineOptions:options()

   ------------------------------------------
   -- Build shell object
   local shell        = BaseShell.build(masterTbl.shell)
   masterTbl.envVarsT = {}
   local cmd          = masterTbl.pargs[1]:lower()

   build_indent(cmd)

   Output(shell)
end

main()
